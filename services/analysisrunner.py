from models.analysis_run import AnalysisRun
from services.hypothesis_generation import HypothesisGenerator

class AnalysisRunner:
    def __init__(self, db, analysis_run_id):
        self.db = db
        self.analysis_run = AnalysisRun.load(db, analysis_run_id)
        if not self.analysis_run:
            raise ValueError("AnalysisRun not found with the given ID.")

    def next_hypothesis(self):
        if self.analysis_run.status == 'done':
            return "Analysis is already completed."

        for analyst_id in self.analysis_run.analyst_ids:
            if len(self.analysis_run.attempts.get(analyst_id, [])) < int(self.analysis_run.n_hypotheses_per_analyst):
                try:
                    generator = HypothesisGenerator(self.db)
                    hypothesis_id = generator.generate_hypothesis(analyst_id, 
                                                                    self.analysis_run.dataset_id)
                    self.analysis_run.hypothesis_ids.append(hypothesis_id)
                    self.analysis_run.attempts[analyst_id].append('success')
                    self.analysis_run.update()
                    return f"New hypothesis generated by analyst {analyst_id}."
                except Exception as e:
                    self.analysis_run.attempts[analyst_id].append('failed')
                    self.analysis_run.update()
                    return f"Failed to generate hypothesis for analyst {analyst_id}: {str(e)}"

        self.analysis_run.status = 'done'
        self.analysis_run.update()
        return "No more hypotheses needed."

    def run(self):
        result = self.next_hypothesis()
        while result not in ["Analysis is already completed.", "No more hypotheses needed."]:
            result = self.next_hypothesis()
        return "All hypotheses generated or attempts exhausted."
