from models.review_set import ReviewSet
from models.review_plan import ReviewPlan
from models.analysis_run import AnalysisRun
from models.hypothesis_set import HypothesisSet
from models.hypothesis import Hypothesis
from services.review_generation import ReviewGenerator
import json

class ReviewRunner:
    def __init__(self, db, review_set_id):
        self.db = db
        self.review_set = ReviewSet.load(db, review_set_id)
        if not self.review_set:
            raise ValueError("ReviewSet not found with the given ID.")
        
        self.review_plan = ReviewPlan.load(db, self.review_set.review_plan_id)
        if not self.review_plan:
            raise ValueError("ReviewPlan not found with the given ID.")
        
        self.analysis_run = AnalysisRun.load(db, self.review_plan.analysis_run_id)
        self.hypothesis_set = HypothesisSet.load(db, self.review_plan.hypothesis_set_id)
        
        self.hypothesis_ids = []
        if not self.analysis_run:
            if not self.hypothesis_set:
                raise ValueError("HypothesisSet and AnalysisRun not found with the given ID.")
            else:
                self.hypothesis_ids = self.hypothesis_set.hypothesis_ids
        else:
            self.hypothesis_ids = self.analysis_run.hypothesis_ids
        
        
        
        self.hypotheses_text = ""
        self.dataset_csv_data = ""
        self.experiment_description = ""
        print(self.hypothesis_ids)
        for index, hypothesis_id in enumerate(self.hypothesis_ids):
            hypothesis = Hypothesis.load(db, hypothesis_id)
            if not hypothesis:
                raise ValueError("Hypothesis not found with the given ID.")
            self.hypotheses_text += f"Hypothesis #{index+1}:\n\n" + hypothesis.hypothesis_text + "\n\n\n"
            self.dataset_csv_data = hypothesis.data
            self.experiment_description = json.loads(hypothesis.dataset_copy)["experiment_description"]

    def next_review(self):
        if self.review_set.status == 'done':
            return "Review is already completed."

        for agent_id in self.review_plan.agent_ids:
            if len(self.review_set.attempts.get(agent_id, [])) < 1:
                try:
                    generator = ReviewGenerator(self.db)
                    review_id = generator.generate_review(agent_id, self.dataset_csv_data, self.experiment_description, self.hypotheses_text, self.hypothesis_ids, self.review_set.object_id)
                    self.review_set.review_ids.append(review_id)
                    self.review_set.attempts[agent_id].append('success')
                    self.review_set.update()
                    return f"New review generated by agent {agent_id}."
                except Exception as e:
                    self.review_set.attempts[agent_id].append('failed')
                    self.review_set.update()
                    return f"Failed to generate review for agent {agent_id}: {str(e)}"

        self.review_set.status = 'done'
        self.review_set.update()
        return "No more reviews needed."

    def run(self):
        run_outputs = ""
        result = self.next_review()
        run_outputs += result + "\n"
        while result not in ["Review is already completed.", "No more reviews needed."]:
            result = self.next_review()
            run_outputs += result + "\n"
        self.review_set.update_run_log(run_outputs)
        return run_outputs
    
