# class Dataset:
#     def __init__(self, genes_of_interest, data=None, experiment_description=None):
#         """
#         Initializes a new Dataset instance.

#         :param data: A list of tuples, each representing (gene/protein, property, value).
#         :param experiment_description: A string describing the experiment.
#         """
#         self.genes_of_interest = genes_of_interest
#         self.data = data
#         self.experiment_description = experiment_description

from agent_evaluation.db_object import DB_Object 

class Dataset(DB_Object):
    def __init__(self, db, db_unique_id=None, genes_of_interest=None, data=None, experiment_description=None, persist=False):
        """
        Initializes a new Dataset instance.

        :param db: Database instance for persistence.
        :param db_unique_id: Unique identifier for the dataset, autogenerated if not provided.
        :param genes_of_interest: List or set of genes that are of interest in the dataset.
        :param data: a string that is typically CSV text, but can be any string.
        :param experiment_description: A string describing the experiment.
        :param persist: Whether to persist the dataset instance upon initialization.
"""        
        self.genes_of_interest = genes_of_interest
        self.data = data
        self.experiment_description = experiment_description
        super().__init__(db, db_unique_id, persist)


    def to_dict(self):
        """
        Converts instance properties to a dictionary for persistence.
        """
        return {
            'genes_of_interest': list(self.genes_of_interest) if self.genes_of_interest else [],
            'data': self.data,
            'experiment_description': self.experiment_description
        }

    def from_dict(self, properties):
        """
        Populates instance properties from a dictionary retrieved from the database.
        """
        if properties is None:
            raise ValueError("Dataset from_dict: properties is None")   
        self.genes_of_interest = set(properties.get('genes_of_interest', []))
        self.data = properties.get('data', "")
        self.experiment_description = properties.get('experiment_description', "")

'''

 Example Usage of Dataset

# Creating a new dataset
new_dataset = Dataset(
    db=db,
    genes_of_interest={'BRCA1', 'TP53'},
    data=[('BRCA1', 'expression', 'high'), ('TP53', 'mutation', 'none')],
    experiment_description="Analysis of gene expression and mutations in cancer cells.",
    persist=True
)

# new_dataset is now persisted. An instance can be loaded from If you need to load an existing dataset
existing_dataset = Dataset(db=db, db_unique_id="existing_dataset_id")
existing_dataset.load()

# Print details to verify
print(f"Loaded Dataset: {existing_dataset.db_unique_id}")
print(f"Description: {existing_dataset.experiment_description}")
print(f"Data: {existing_dataset.data}")

'''
